{"version":3,"sources":["components/common/Select.jsx","components/common/Button.jsx","components/common/SwapButton.jsx","components/LanguagePair.jsx","components/LanguageChanger.jsx","components/common/CopyButton.jsx","components/common/PasteButton.jsx","components/CopyPasteButtons.jsx","utils/changeLanguage.js","utils/generateAppComponents.js","App.js","index.js"],"names":["Select","label","options","selectedOption","onChange","className","style","margin","htmlFor","id","value","map","option","key","Button","baseClasses","icon","props","undefined","SwapButton","aria-label","faExchangeAlt","LanguagePair","languages","selectedLanguageFrom","onChangeFrom","selectedLanguageTo","onChangeTo","onSwap","data-testid","onClick","LanguageChanger","fromValue","toValue","dir","disabled","CopyButton","faCopy","PasteButton","faPaste","CopyPasteButtons","onCopy","onPaste","require","this","fromLanguage","toLanguage","languageMap","Map","i","set","inputText","newChar","lowerInputText","toLowerCase","outputText","letter","get","lightTheme","background","text","darkTheme","gitHubButton","position","bottom","left","type","href","navbar","light","dark","toast","configure","autoClose","hideProgressBar","App","state","selectedOptionFrom","selectedOptionTo","languageChanged","Changer","init","newLanguageSelected","setState","change","handleSelect","e","newState","target","handleSelectFrom","handleSelectTo","handleSwap","handleChange","handleCopy","a","navigator","clipboard","writeText","success","error","handlePaste","readText","languagePairProps","Object","keys","Fragment","generate","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02125126.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * A controlled react select element.\r\n *\r\n * It has a label as well as an actual select element.\r\n * @param {Object} selectOptions An object containing the label, options, selectedOption and onChange select attributes.\r\n * @returns {ReactComponent} The rendered select element.\r\n */\r\nconst Select = ({ label, options, selectedOption, onChange }) => {\r\n    return (\r\n        <div className=\"col-sm-3\">\r\n            <div className=\"form-group\">\r\n                <h6 style={{ margin: 0 }}>\r\n                    <label htmlFor={label}>{label}</label>\r\n                </h6>\r\n                <select\r\n                    id={label}\r\n                    value={selectedOption}\r\n                    onChange={onChange}\r\n                    className=\"form-control\"\r\n                >\r\n                    {options.map(option => (\r\n                        <option key={option}>{option}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * A button with an icon and an optional label.\r\n *\r\n * @param {Object} props Props for a button.\r\n * @returns {ReactComponent} The actual button.\r\n */\r\nconst Button = ({ baseClasses, label, icon, ...props }) => {\r\n    return (\r\n        <button\r\n            {...props}\r\n            className={\r\n                baseClasses +\r\n                (props.className === undefined ? \"\" : ` ${props.className}`)\r\n            }\r\n        >\r\n            <FontAwesomeIcon icon={icon} />\r\n            {label && <span> {label}</span>}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { faExchangeAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Button from \"./Button\";\r\n\r\n/**\r\n * A button with a swap icon.\r\n *\r\n * @param {Object} props Props for a button.\r\n * @returns {ReactComponent} The swap button.\r\n */\r\nconst SwapButton = props => {\r\n    return (\r\n        <Button\r\n            {...props}\r\n            aria-label=\"Swap Button\"\r\n            baseClasses=\"btn btn-primary btn-lg btn-block\"\r\n            icon={faExchangeAlt}\r\n        />\r\n    );\r\n};\r\n\r\nexport default SwapButton;\r\n","import React from \"react\";\r\nimport Select from \"./common/Select\";\r\nimport SwapButton from \"./common/SwapButton\";\r\n\r\n/**\r\n * Represents a pair of languages.\r\n *\r\n * This component is comprised of two Select elements (one for each language) and a Swap button to switch between them.\r\n *\r\n * General Look:\r\n * <<From Language>> <<Swap Button>> <<To Language>>\r\n *\r\n * This component exists so the user can choose from which language to change to another language. It also allows for a quick swap between those.\r\n *\r\n * @param {Object} languagePairOptions An object with the following properties: languages, selectedLanguageFrom, onChangeFrom, selectedLanguageTo, onChangeTo, onSwap\r\n * @returns {ReactComponent} The language pair component.\r\n */\r\nconst LanguagePair = ({\r\n    languages,\r\n    selectedLanguageFrom,\r\n    onChangeFrom,\r\n    selectedLanguageTo,\r\n    onChangeTo,\r\n    onSwap\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <div className=\"row center\">\r\n                <Select\r\n                    label=\"From\"\r\n                    options={languages}\r\n                    selectedOption={selectedLanguageFrom}\r\n                    onChange={onChangeFrom}\r\n                />\r\n                <div className=\"col-sm-2\">\r\n                    <SwapButton data-testid=\"swap-button\" onClick={onSwap} />\r\n                </div>\r\n                <Select\r\n                    label=\"To\"\r\n                    options={languages}\r\n                    selectedOption={selectedLanguageTo}\r\n                    onChange={onChangeTo}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LanguagePair;\r\n","import React from \"react\";\r\nimport TextareaAutosize from \"react-autosize-textarea\";\r\n\r\n/**\r\n * A component that represents a change of language.\r\n *\r\n * It has two text areas, one enabled and the other - not.\r\n *\r\n * @param {Object} languageChangerOptions An object with the following properties: onChange, fromValue, toValue\r\n * @returns {ReactComponent} The language changer component.\r\n */\r\nconst LanguageChanger = ({ onChange, fromValue, toValue }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <TextareaAutosize\r\n                        onChange={onChange}\r\n                        dir=\"auto\"\r\n                        className=\"form-control\"\r\n                        value={fromValue}\r\n                        data-testid=\"from-textarea\"\r\n                    />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <TextareaAutosize\r\n                        dir=\"auto\"\r\n                        className=\"form-control\"\r\n                        value={toValue}\r\n                        disabled\r\n                        data-testid=\"to-textarea\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LanguageChanger;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport { faCopy } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n/**\r\n * A button with a copy icon and a \"Copy\" text.\r\n *\r\n * @param {Object} props Props for a button.\r\n * @returns {ReactComponent} The copy button.\r\n */\r\nconst CopyButton = props => {\r\n    return (\r\n        <Button\r\n            {...props}\r\n            baseClasses=\"btn btn-secondary float-right\"\r\n            label=\"Copy\"\r\n            icon={faCopy}\r\n        />\r\n    );\r\n};\r\n\r\nexport default CopyButton;\r\n","import React from \"react\";\r\nimport { faPaste } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Button from \"./Button\";\r\n\r\n/**\r\n * A button with a paste icon and a \"Paste\" text.\r\n *\r\n * @param {Object} props Props for a button.\r\n * @returns {ReactComponent} The paste button.\r\n */\r\nconst PasteButton = props => {\r\n    return (\r\n        <Button\r\n            {...props}\r\n            baseClasses=\"btn btn-secondary\"\r\n            label=\"Paste\"\r\n            icon={faPaste}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PasteButton;\r\n","import React from \"react\";\r\nimport CopyButton from \"./common/CopyButton\";\r\nimport PasteButton from \"./common/PasteButton\";\r\n\r\n/**\r\n * A component that has both a Copy and Paste buttons.\r\n *\r\n * General Look:\r\n * <<Paste Button>>           <<Copy Button>>\r\n *\r\n * @param {function} onCopy The function that will be called when the Copy button is clicked.\r\n * @param {function} onPaste The function that will be called when the Paste button is clicked.\r\n * @returns {ReactComponent} The set of buttons.\r\n */\r\nconst CopyPasteButtons = ({ onCopy, onPaste }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <PasteButton onClick={onPaste} />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <CopyButton onClick={onCopy} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CopyPasteButtons;\r\n","const languages = require(\"../resources/languages\"); // get languages\r\n\r\n/**\r\n * Class with the ability to \"change\" one language to another.\r\n */\r\nclass Changer {\r\n    constructor() {\r\n        this.languages = languages;\r\n    }\r\n\r\n    /**\r\n     * Creates a Map from <code>fromLanguage</code> to <code>toLanguage</code>.\r\n     *\r\n     * This map will be used for every change() call.\r\n     * @param {String} fromLanguage The language to \"change\" from.\r\n     * @param {String} toLanguage The destination language.\r\n     *\r\n     * @example\r\n     * init(\"English\", \"Hebrew\")\r\n     */\r\n    init(fromLanguage, toLanguage) {\r\n        this.languageMap = new Map();\r\n        for (let i = 0; i < 40; i++) {\r\n            this.languageMap.set(\r\n                this.languages[fromLanguage][i],\r\n                this.languages[toLanguage][i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a given text according to the Map set with init().\r\n     *\r\n     * @param {String} inputText String to be \"changed\".\r\n     *\r\n     * @example\r\n     * // assuming init(\"English\", \"Hebrew\") was called sometime in the past\r\n     * const changed = change(\"uutu thzv eus ndbhc\")\r\n     * console.log(changed)\r\n     * // should print וואו איזה קוד מגניב\r\n     *\r\n     * @returns {String} \"Changed\" text.\r\n     */\r\n    change(inputText) {\r\n        const lowerInputText = inputText.toLowerCase();\r\n        let outputText = \"\";\r\n        let newChar;\r\n        // eslint-disable-next-line\r\n        for (const letter of lowerInputText) {\r\n            newChar = this.languageMap.get(letter);\r\n            outputText += newChar === undefined ? letter : newChar;\r\n        }\r\n        return outputText;\r\n    }\r\n}\r\n\r\nexport default new Changer();\r\n","import React from \"react\";\r\nimport { AwesomeButtonSocial } from \"react-awesome-button\";\r\nimport DarkTheme from \"react-dark-theme\";\r\n\r\nconst lightTheme = {\r\n    background: \"white\",\r\n    text: \"#161617\"\r\n};\r\n\r\nconst darkTheme = {\r\n    background: \"#161617\",\r\n    text: \"white\"\r\n};\r\n\r\n/**\r\n * Generates a button the redirects to the repository.\r\n *\r\n * @returns {ReactComponent} The button.\r\n */\r\nfunction gitHubButton() {\r\n    return (\r\n        <AwesomeButtonSocial\r\n            style={{\r\n                position: \"fixed\",\r\n                bottom: \"1%\",\r\n                left: \"0.5%\"\r\n            }}\r\n            type=\"github\"\r\n            href=\"https://github.com/YardenShoham/lang-switch\"\r\n        >\r\n            GitHub\r\n        </AwesomeButtonSocial>\r\n    );\r\n}\r\n\r\n/**\r\n * Generates the navigation bar that appears atop the page.\r\n *\r\n * It includes a link to the home page and a toggle button to toggle dark theme.\r\n *\r\n * @returns {ReactComponent} The navigation bar.\r\n */\r\nfunction navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                Lang Switch\r\n            </a>\r\n            <DarkTheme light={lightTheme} dark={darkTheme} />\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default {\r\n    gitHubButton,\r\n    navbar\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport LanguagePair from \"./components/LanguagePair\";\r\nimport LanguageChanger from \"./components/LanguageChanger\";\r\nimport CopyPasteButtons from \"./components/CopyPasteButtons\";\r\nimport Changer from \"./utils/changeLanguage\";\r\nimport generate from \"./utils/generateAppComponents\";\r\n\r\ntoast.configure({\r\n    autoClose: 2000,\r\n    hideProgressBar: true\r\n});\r\n\r\nclass App extends Component {\r\n    state = {\r\n        selectedOptionFrom: \"English\",\r\n        selectedOptionTo: \"Hebrew\",\r\n        fromValue: \"\",\r\n        toValue: \"\"\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.languages = Object.keys(Changer.languages);\r\n    }\r\n\r\n    languageChanged = () =>\r\n        Changer.init(\r\n            this.state.selectedOptionFrom,\r\n            this.state.selectedOptionTo\r\n        );\r\n\r\n    newLanguageSelected = () => {\r\n        this.languageChanged();\r\n        this.setState({ toValue: Changer.change(this.state.fromValue) });\r\n    };\r\n\r\n    handleSelect = (selectedOption, e) => {\r\n        let newState = {};\r\n        newState[selectedOption] = e.target.value;\r\n        this.setState(newState, this.newLanguageSelected);\r\n    };\r\n\r\n    handleSelectFrom = e => this.handleSelect(\"selectedOptionFrom\", e);\r\n\r\n    handleSelectTo = e => this.handleSelect(\"selectedOptionTo\", e);\r\n\r\n    handleSwap = () =>\r\n        this.setState(\r\n            {\r\n                selectedOptionFrom: this.state.selectedOptionTo,\r\n                selectedOptionTo: this.state.selectedOptionFrom,\r\n                fromValue: this.state.toValue,\r\n                toValue: this.state.fromValue\r\n            },\r\n            this.newLanguageSelected\r\n        );\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            fromValue: e.target.value,\r\n            toValue: Changer.change(e.target.value)\r\n        });\r\n    };\r\n\r\n    handleCopy = async () => {\r\n        try {\r\n            await navigator.clipboard.writeText(this.state.toValue);\r\n            /* istanbul ignore next */\r\n            toast.success(\"📃 Copied to clipboard!\");\r\n        } catch (ex) {\r\n            /* istanbul ignore next */\r\n            toast.error(\"⁉ Your browser doesn't support copy.\");\r\n        }\r\n    };\r\n\r\n    handlePaste = async () => {\r\n        try {\r\n            /* istanbul ignore next */\r\n            this.setState(\r\n                { fromValue: await navigator.clipboard.readText() },\r\n                () => {\r\n                    this.setState({\r\n                        toValue: Changer.change(this.state.fromValue)\r\n                    });\r\n                }\r\n            );\r\n        } catch (ex) {\r\n            /* istanbul ignore next */\r\n            toast.error(\"⁉ Your browser doesn't support paste.\");\r\n        }\r\n    };\r\n\r\n    languagePairProps = () => {\r\n        return {\r\n            languages: this.languages,\r\n            onChangeFrom: this.handleSelectFrom,\r\n            onChangeTo: this.handleSelectTo,\r\n            selectedLanguageFrom: this.state.selectedOptionFrom,\r\n            selectedLanguageTo: this.state.selectedOptionTo,\r\n            onSwap: this.handleSwap\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.languageChanged();\r\n    }\r\n\r\n    render() {\r\n        const { fromValue, toValue } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                {generate.navbar()}\r\n                <main className=\"container\">\r\n                    <LanguagePair {...this.languagePairProps()} />\r\n                    <LanguageChanger\r\n                        onChange={this.handleChange}\r\n                        fromValue={fromValue}\r\n                        toValue={toValue}\r\n                    />\r\n                    <CopyPasteButtons\r\n                        onCopy={this.handleCopy}\r\n                        onPaste={this.handlePaste}\r\n                    />\r\n                    {generate.gitHubButton()}\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\n/* istanbul ignore next */\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}