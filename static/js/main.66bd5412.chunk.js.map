{"version":3,"sources":["utils/changeLanguage.js","components/common/Select.jsx","components/common/SwapButton.jsx","components/LanguagePair.jsx","components/LanguageChanger.jsx","App.js","serviceWorker.js","index.js"],"names":["languageMap","Select","label","options","selectedOption","onChange","className","style","margin","htmlFor","id","value","map","option","key","SwapButton","props","icon","faExchangeAlt","LanguagePair","selectedOptionFrom","onChangeFrom","selectedOptionTo","onChangeTo","onSwap","onClick","LanguageChanger","fromValue","toValue","dir","disabled","languages","English","Hebrew","init","fromLanguage","toLanguage","Map","i","set","change","inputText","newChar","outputText","letter","undefined","get","App","state","languageChanged","Changer","handleSelectFrom","e","setState","target","handleSelectTo","handleSwap","handleChange","this","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66bd5412.chunk.js","sourcesContent":["const languages = {\r\n    English: [\r\n        \"`\",\r\n        \"q\",\r\n        \"w\",\r\n        \"e\",\r\n        \"r\",\r\n        \"t\",\r\n        \"y\",\r\n        \"u\",\r\n        \"i\",\r\n        \"o\",\r\n        \"p\",\r\n        \"[\",\r\n        \"]\",\r\n        \"a\",\r\n        \"s\",\r\n        \"d\",\r\n        \"f\",\r\n        \"g\",\r\n        \"h\",\r\n        \"j\",\r\n        \"k\",\r\n        \"l\",\r\n        \";\",\r\n        \"'\",\r\n        \"z\",\r\n        \"x\",\r\n        \"c\",\r\n        \"v\",\r\n        \"b\",\r\n        \"n\",\r\n        \"m\",\r\n        \",\",\r\n        \".\",\r\n        \"/\",\r\n        \"(\",\r\n        \")\",\r\n        \"{\",\r\n        \"}\",\r\n        \"<\",\r\n        \">\"\r\n    ],\r\n    Hebrew: [\r\n        \";\",\r\n        \"/\",\r\n        \"'\",\r\n        \"ק\",\r\n        \"ר\",\r\n        \"א\",\r\n        \"ט\",\r\n        \"ו\",\r\n        \"ן\",\r\n        \"ם\",\r\n        \"פ\",\r\n        \"]\",\r\n        \"[\",\r\n        \"ש\",\r\n        \"ד\",\r\n        \"ג\",\r\n        \"כ\",\r\n        \"ע\",\r\n        \"י\",\r\n        \"ח\",\r\n        \"ל\",\r\n        \"ך\",\r\n        \"ף\",\r\n        \",\",\r\n        \"ז\",\r\n        \"ס\",\r\n        \"ב\",\r\n        \"ה\",\r\n        \"נ\",\r\n        \"מ\",\r\n        \"צ\",\r\n        \"ת\",\r\n        \"ץ\",\r\n        \".\",\r\n        \"/\",\r\n        \")\",\r\n        \"(\",\r\n        \"}\",\r\n        \"{\",\r\n        \">\",\r\n        \"<\"\r\n    ]\r\n};\r\n\r\nlet languageMap;\r\n\r\nfunction init(fromLanguage, toLanguage) {\r\n    languageMap = new Map();\r\n    for (let i = 0; i < 40; i++) {\r\n        languageMap.set(languages[fromLanguage][i], languages[toLanguage][i]);\r\n    }\r\n}\r\n\r\nfunction change(inputText) {\r\n    let outputText = \"\";\r\n    let newChar;\r\n    for (const letter of inputText) {\r\n        newChar = languageMap.get(letter);\r\n        outputText += newChar === undefined ? letter : newChar;\r\n    }\r\n    return outputText;\r\n}\r\n\r\nexport default {\r\n    init,\r\n    change\r\n};\r\n","import React from \"react\";\r\n\r\nconst Select = ({ label, options, selectedOption, onChange }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <h6 style={{ margin: 0 }}>\r\n                <label htmlFor={label}>{label}</label>\r\n            </h6>\r\n            <select\r\n                id={label}\r\n                value={selectedOption}\r\n                onChange={onChange}\r\n                className=\"form-control\"\r\n            >\r\n                {options.map(option => (\r\n                    <option key={option}>{option}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport { faExchangeAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst SwapButton = props => {\r\n    return (\r\n        <button {...props} className=\"btn btn-primary btn-lg btn-block\">\r\n            <FontAwesomeIcon icon={faExchangeAlt} />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default SwapButton;\r\n","import React from \"react\";\r\nimport Select from \"./common/Select\";\r\nimport SwapButton from \"./common/SwapButton\";\r\n\r\nconst LanguagePair = ({\r\n    options,\r\n    selectedOptionFrom,\r\n    onChangeFrom,\r\n    selectedOptionTo,\r\n    onChangeTo,\r\n    onSwap\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <div className=\"row center\">\r\n                <div className=\"col-sm-3\">\r\n                    <Select\r\n                        label=\"From\"\r\n                        options={options}\r\n                        selectedOption={selectedOptionFrom}\r\n                        onChange={onChangeFrom}\r\n                    ></Select>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                    <SwapButton onClick={onSwap} />\r\n                </div>\r\n                <div className=\"col-sm-3\">\r\n                    <Select\r\n                        label=\"To\"\r\n                        options={options}\r\n                        selectedOption={selectedOptionTo}\r\n                        onChange={onChangeTo}\r\n                    ></Select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LanguagePair;\r\n","import React from \"react\";\r\nimport TextareaAutosize from \"react-autosize-textarea\";\r\n\r\nconst LanguageChanger = ({ onChange, fromValue, toValue }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <TextareaAutosize\r\n                        onChange={onChange}\r\n                        dir=\"auto\"\r\n                        className=\"form-control\"\r\n                        value={fromValue}\r\n                    />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <TextareaAutosize\r\n                        dir=\"auto\"\r\n                        className=\"form-control\"\r\n                        value={toValue}\r\n                        disabled\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LanguageChanger;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport LanguagePair from \"./components/LanguagePair\";\r\nimport LanguageChanger from \"./components/LanguageChanger\";\r\nimport Changer from \"./utils/changeLanguage\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        selectedOptionFrom: \"Hebrew\",\r\n        selectedOptionTo: \"English\",\r\n        fromValue: \"\",\r\n        toValue: \"\"\r\n    };\r\n\r\n    languageChanged = () =>\r\n        Changer.init(\r\n            this.state.selectedOptionFrom,\r\n            this.state.selectedOptionTo\r\n        );\r\n\r\n    handleSelectFrom = e => {\r\n        this.languageChanged();\r\n        this.setState({ selectedOptionFrom: e.target.value });\r\n    };\r\n\r\n    handleSelectTo = e => {\r\n        this.languageChanged();\r\n        this.setState({ selectedOptionTo: e.target.value });\r\n    };\r\n\r\n    handleSwap = () => {\r\n        this.languageChanged();\r\n        this.setState({\r\n            selectedOptionFrom: this.state.selectedOptionTo,\r\n            selectedOptionTo: this.state.selectedOptionFrom,\r\n            fromValue: this.state.toValue,\r\n            toValue: this.state.fromValue\r\n        });\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            fromValue: e.target.value,\r\n            toValue: Changer.change(e.target.value)\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.languageChanged();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            selectedOptionFrom,\r\n            selectedOptionTo,\r\n            fromValue,\r\n            toValue\r\n        } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <nav className=\"navbar navbar-dark bg-dark\">\r\n                    <span className=\"navbar-brand clickable\">Lang Switch</span>\r\n                </nav>\r\n                <main className=\"container\">\r\n                    <LanguagePair\r\n                        options={[\"Hebrew\", \"English\"]}\r\n                        onChangeFrom={this.handleSelectFrom}\r\n                        onChangeTo={this.handleSelectTo}\r\n                        selectedOptionFrom={selectedOptionFrom}\r\n                        selectedOptionTo={selectedOptionTo}\r\n                        onSwap={this.handleSwap}\r\n                    />\r\n                    <LanguageChanger\r\n                        onChange={this.handleChange}\r\n                        fromValue={fromValue}\r\n                        toValue={toValue}\r\n                    />\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}