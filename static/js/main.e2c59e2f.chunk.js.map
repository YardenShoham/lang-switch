{"version":3,"sources":["components/common/Select.jsx","components/common/SwapButton.jsx","components/LanguagePair.jsx","components/LanguageChanger.jsx","utils/changeLanguage.js","components/common/CopyButton.jsx","components/common/PasteButton.jsx","App.js","index.js"],"names":["Select","label","options","selectedOption","onChange","className","style","margin","htmlFor","id","value","map","option","key","SwapButton","classes","props","aria-label","undefined","icon","faExchangeAlt","LanguagePair","languages","selectedLanguageFrom","onChangeFrom","selectedLanguageTo","onChangeTo","onSwap","data-testid","onClick","LanguageChanger","fromValue","toValue","dir","disabled","require","this","fromLanguage","toLanguage","languageMap","Map","i","set","inputText","newChar","lowerInputText","toLowerCase","outputText","letter","get","CopyButton","faCopy","PasteButton","faPaste","lightTheme","background","text","darkTheme","App","state","selectedOptionFrom","selectedOptionTo","languageChanged","Changer","init","handleSelectFrom","e","setState","target","change","handleSelectTo","handleSwap","handleChange","handleCopy","a","navigator","clipboard","writeText","toast","success","error","handlePaste","readText","Object","keys","Fragment","autoClose","hideProgressBar","href","light","dark","position","bottom","left","type","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2c59e2f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * A controlled react select element.\r\n *\r\n * It has a label as well as an actual select element.\r\n * @param {Object} selectOptions An object containing the label, options, selectedOption and onChange select attributes.\r\n * @returns {ReactComponent} The rendered select element.\r\n */\r\nconst Select = ({ label, options, selectedOption, onChange }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <h6 style={{ margin: 0 }}>\r\n                <label htmlFor={label}>{label}</label>\r\n            </h6>\r\n            <select\r\n                id={label}\r\n                value={selectedOption}\r\n                onChange={onChange}\r\n                className=\"form-control\"\r\n            >\r\n                {options.map(option => (\r\n                    <option key={option}>{option}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport { faExchangeAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * A button with a swap icon.\r\n *\r\n * @param {Object} props Props for a button.\r\n * @returns {ReactComponent} The swap button.\r\n */\r\nconst SwapButton = ({ className: classes, ...props }) => {\r\n    return (\r\n        <button\r\n            {...props}\r\n            aria-label=\"Swap Button\"\r\n            className={`btn btn-primary btn-lg btn-block${\r\n                classes === undefined ? \"\" : ` ${classes}`\r\n            }`}\r\n        >\r\n            <FontAwesomeIcon icon={faExchangeAlt} />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default SwapButton;\r\n","import React from \"react\";\r\nimport Select from \"./common/Select\";\r\nimport SwapButton from \"./common/SwapButton\";\r\n\r\n/**\r\n * Represents a pair of languages.\r\n *\r\n * This component is comprised of two Select elements (one for each language) and a Swap button to switch between them.\r\n *\r\n * General Look:\r\n * <<From Language>> <<Swap Button>> <<To Language>>\r\n *\r\n * This component exists so the user can choose from which language to change to another language. It also allows for a quick swap between those.\r\n *\r\n * @param {Object} languagePairOptions An object with the following properties: languages, selectedLanguageFrom, onChangeFrom, selectedLanguageTo, onChangeTo, onSwap\r\n * @returns {ReactComponent} The language pair component.\r\n */\r\nconst LanguagePair = ({\r\n    languages,\r\n    selectedLanguageFrom,\r\n    onChangeFrom,\r\n    selectedLanguageTo,\r\n    onChangeTo,\r\n    onSwap\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <div className=\"row center\">\r\n                <div className=\"col-sm-3\">\r\n                    <Select\r\n                        label=\"From\"\r\n                        options={languages}\r\n                        selectedOption={selectedLanguageFrom}\r\n                        onChange={onChangeFrom}\r\n                    ></Select>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                    <SwapButton data-testid=\"swap-button\" onClick={onSwap} />\r\n                </div>\r\n                <div className=\"col-sm-3\">\r\n                    <Select\r\n                        label=\"To\"\r\n                        options={languages}\r\n                        selectedOption={selectedLanguageTo}\r\n                        onChange={onChangeTo}\r\n                    ></Select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LanguagePair;\r\n","import React from \"react\";\r\nimport TextareaAutosize from \"react-autosize-textarea\";\r\n\r\n/**\r\n * A component that represents a change of language.\r\n *\r\n * It has two text areas, one enabled and the other - not.\r\n *\r\n * @param {Object} languageChangerOptions An object with the following properties: onChange, fromValue, toValue\r\n * @returns {ReactComponent} The language changer component.\r\n */\r\nconst LanguageChanger = ({ onChange, fromValue, toValue }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <TextareaAutosize\r\n                        onChange={onChange}\r\n                        dir=\"auto\"\r\n                        className=\"form-control\"\r\n                        value={fromValue}\r\n                        data-testid=\"from-textarea\"\r\n                    />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <TextareaAutosize\r\n                        dir=\"auto\"\r\n                        className=\"form-control\"\r\n                        value={toValue}\r\n                        disabled\r\n                        data-testid=\"to-textarea\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LanguageChanger;\r\n","const languages = require(\"../resources/languages\"); // get languages\r\n\r\n/**\r\n * Class with the ability to \"change\" one language to another.\r\n */\r\nclass Changer {\r\n    constructor() {\r\n        this.languages = languages;\r\n    }\r\n\r\n    /**\r\n     * Creates a Map from <code>fromLanguage</code> to <code>toLanguage</code>.\r\n     *\r\n     * This map will be used for every change() call.\r\n     * @param {String} fromLanguage The language to \"change\" from.\r\n     * @param {String} toLanguage The destination language.\r\n     *\r\n     * @example\r\n     * init(\"English\", \"Hebrew\")\r\n     */\r\n    init(fromLanguage, toLanguage) {\r\n        this.languageMap = new Map();\r\n        for (let i = 0; i < 40; i++) {\r\n            this.languageMap.set(\r\n                this.languages[fromLanguage][i],\r\n                this.languages[toLanguage][i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a given text according to the Map set with init().\r\n     *\r\n     * @param {String} inputText String to be \"changed\".\r\n     *\r\n     * @example\r\n     * // assuming init(\"English\", \"Hebrew\") was called sometime in the past\r\n     * const changed = change(\"uutu thzv eus ndbhc\")\r\n     * console.log(changed)\r\n     * // should print וואו איזה קוד מגניב\r\n     *\r\n     * @returns {String} \"Changed\" text.\r\n     */\r\n    change(inputText) {\r\n        const lowerInputText = inputText.toLowerCase();\r\n        let outputText = \"\";\r\n        let newChar;\r\n        // eslint-disable-next-line\r\n        for (const letter of lowerInputText) {\r\n            newChar = this.languageMap.get(letter);\r\n            outputText += newChar === undefined ? letter : newChar;\r\n        }\r\n        return outputText;\r\n    }\r\n}\r\n\r\nexport default new Changer();\r\n","import React from \"react\";\r\nimport { faCopy } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * A button with a copy icon and a \"Copy\" text.\r\n *\r\n * @param {Object} props Props for a button.\r\n * @returns {ReactComponent} The copy button.\r\n */\r\nconst CopyButton = ({ className: classes, ...props }) => {\r\n    return (\r\n        <button\r\n            {...props}\r\n            className={`btn btn-secondary float-right${\r\n                classes === undefined ? \"\" : ` ${classes}`\r\n            }`}\r\n        >\r\n            <FontAwesomeIcon icon={faCopy} />\r\n            <span> Copy</span>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default CopyButton;\r\n","import React from \"react\";\r\nimport { faPaste } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * A button with a paste icon and a \"Paste\" text.\r\n *\r\n * @param {Object} props Props for a button.\r\n * @returns {ReactComponent} The paste button.\r\n */\r\nconst PasteButton = ({ className: classes, ...props }) => {\r\n    return (\r\n        <button\r\n            {...props}\r\n            className={`btn btn-secondary${\r\n                classes === undefined ? \"\" : ` ${classes}`\r\n            }`}\r\n        >\r\n            <FontAwesomeIcon icon={faPaste} />\r\n            <span> Paste</span>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default PasteButton;\r\n","import React, { Component } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport DarkTheme from \"react-dark-theme\";\r\nimport { AwesomeButtonSocial } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport LanguagePair from \"./components/LanguagePair\";\r\nimport LanguageChanger from \"./components/LanguageChanger\";\r\nimport Changer from \"./utils/changeLanguage\";\r\nimport CopyButton from \"./components/common/CopyButton\";\r\nimport PasteButton from \"./components/common/PasteButton\";\r\n\r\nconst lightTheme = {\r\n    background: \"white\",\r\n    text: \"#161617\"\r\n};\r\n\r\nconst darkTheme = {\r\n    background: \"#161617\",\r\n    text: \"white\"\r\n};\r\n\r\nclass App extends Component {\r\n    state = {\r\n        selectedOptionFrom: \"English\",\r\n        selectedOptionTo: \"Hebrew\",\r\n        fromValue: \"\",\r\n        toValue: \"\"\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.languages = Object.keys(Changer.languages);\r\n    }\r\n\r\n    languageChanged = () =>\r\n        Changer.init(\r\n            this.state.selectedOptionFrom,\r\n            this.state.selectedOptionTo\r\n        );\r\n\r\n    handleSelectFrom = e =>\r\n        this.setState({ selectedOptionFrom: e.target.value }, () => {\r\n            this.languageChanged();\r\n            this.setState({ toValue: Changer.change(this.state.fromValue) });\r\n        });\r\n\r\n    handleSelectTo = e =>\r\n        this.setState({ selectedOptionTo: e.target.value }, () => {\r\n            this.languageChanged();\r\n            this.setState({ toValue: Changer.change(this.state.fromValue) });\r\n        });\r\n\r\n    handleSwap = () =>\r\n        this.setState(\r\n            {\r\n                selectedOptionFrom: this.state.selectedOptionTo,\r\n                selectedOptionTo: this.state.selectedOptionFrom,\r\n                fromValue: this.state.toValue,\r\n                toValue: this.state.fromValue\r\n            },\r\n            () => {\r\n                this.languageChanged();\r\n                this.setState({\r\n                    toValue: Changer.change(this.state.fromValue)\r\n                });\r\n            }\r\n        );\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            fromValue: e.target.value,\r\n            toValue: Changer.change(e.target.value)\r\n        });\r\n    };\r\n\r\n    handleCopy = async () => {\r\n        try {\r\n            await navigator.clipboard.writeText(this.state.toValue);\r\n            /* istanbul ignore next */\r\n            toast.success(\"📃 Copied to clipboard!\");\r\n        } catch (ex) {\r\n            /* istanbul ignore next */\r\n            toast.error(\"⁉ Your browser doesn't support copy.\");\r\n        }\r\n    };\r\n\r\n    handlePaste = async () => {\r\n        try {\r\n            /* istanbul ignore next */\r\n            this.setState(\r\n                { fromValue: await navigator.clipboard.readText() },\r\n                () => {\r\n                    this.setState({\r\n                        toValue: Changer.change(this.state.fromValue)\r\n                    });\r\n                }\r\n            );\r\n        } catch (ex) {\r\n            /* istanbul ignore next */\r\n            toast.error(\"⁉ Your browser doesn't support paste.\");\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.languageChanged();\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            selectedOptionFrom,\r\n            selectedOptionTo,\r\n            fromValue,\r\n            toValue\r\n        } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <ToastContainer autoClose={2000} hideProgressBar={true} />\r\n                <nav className=\"navbar navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"/\">\r\n                        Lang Switch\r\n                    </a>\r\n                    <DarkTheme light={lightTheme} dark={darkTheme} />\r\n                </nav>\r\n                <main className=\"container\">\r\n                    <LanguagePair\r\n                        languages={this.languages}\r\n                        onChangeFrom={this.handleSelectFrom}\r\n                        onChangeTo={this.handleSelectTo}\r\n                        selectedLanguageFrom={selectedOptionFrom}\r\n                        selectedLanguageTo={selectedOptionTo}\r\n                        onSwap={this.handleSwap}\r\n                    />\r\n                    <LanguageChanger\r\n                        onChange={this.handleChange}\r\n                        fromValue={fromValue}\r\n                        toValue={toValue}\r\n                    />\r\n                    <div className=\"form-group\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <PasteButton onClick={this.handlePaste} />\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <CopyButton onClick={this.handleCopy} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <AwesomeButtonSocial\r\n                        style={{\r\n                            position: \"fixed\",\r\n                            bottom: \"1%\",\r\n                            left: \"0.5%\"\r\n                        }}\r\n                        type=\"github\"\r\n                        href=\"https://github.com/YardenShoham/lang-switch\"\r\n                    >\r\n                        GitHub\r\n                    </AwesomeButtonSocial>\r\n                </main>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}